#!/usr/bin/env bash


# shellcheck disable=SC2032
# shellcheck disable=SC2033


#### Config ==start ####

# Fail on bad exit code
set -e

#### Config ==final ####


#### Variables ==start ####

export PATH="${PATH}:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin"

#APP="$(basename "${0}")"
APP="$(basename "$(pwd)")"
HELPER_FILE="$(readlink -f "${BASH_SOURCE[0]}")"
#APP_DIR="${HOME}/Apps/${APP}"
APP_DIR="$(pwd)"

APP_FILE="${APP_DIR}/index.js"
APP_PKG_LOCK="package-lock.json"
APP_USER="pi"
APP_NM_DIR="${APP_DIR}/node_modules"

SYSTEMD_DIR="/etc/systemd/system"
SYSTEMD_APP="${APP}.service"
SYSTEMD_APP_FILE="${SYSTEMD_DIR}/${SYSTEMD_APP}"

UNAME="$(uname)"

export NODE_PATH="${APP_DIR}/lib:${APP_DIR}/modules:${APP_DIR}/share:${APP_NM_DIR}:${NODE_PATH}"

#### Variables ==final ####


#### Support functions ==start ####

_log() {
	echo "[${APP}] ${1}"
}

_usage() {
	# Declare vars as local
	local OPTIONS="debug|launch|update|rebuild"

	# If on Linux, get option names by scraping file
	if [[ "${UNAME}" == "Linux" ]]; then
		OPTIONS="$(grep -o '^[[:alpha:]]*.()\ {$' "${HELPER_FILE}" | sed -E -e ':a;N;$!ba;s/\n/|/g' -e 's/\(\)\ \{//g')"
	fi

	echo "Usage: $(basename "${0}") <${OPTIONS}>"
	exit
}

_platform_check() {
	if [[ "${UNAME}" != "Linux" ]]; then
		if ! echo "${1}" | grep -Eq 'debug|launch|update|rebuild'; then
			echo "Command '${1}' is not supported on platform '${UNAME}'"
			_usage
			exit
		fi
	fi
}

_sleep_msg() {
	_log "Sleeping"
	sleep 0.5
}

#### Support functions ==final ####


#### Main functions ==start ####

debug() {
	[[ "${UNAME}" == "Linux" ]] && stop > /dev/null 2>&1

	export NODE_ENV="development"
	export NODE_BMW_DEBUG_PROTO="true"

	/usr/bin/env node \
		--unhandled-rejections=strict \
		--throw-deprecation           \
		--trace-deprecation           \
		--trace-warnings              \
		"${APP_FILE}" "${1}"

	unset NODE_BMW_DEBUG_PROTO NODE_ENV
}

launch() {
	[[ "${UNAME}" == "Linux" ]] && stop > /dev/null 2>&1

	export NODE_ENV="production"

	/usr/bin/env node \
		--unhandled-rejections=strict \
		--throw-deprecation           \
		--trace-deprecation           \
		--trace-warnings              \
		"${APP_FILE}" "${1}"

	unset NODE_ENV
}

update() {
	cd "${APP_DIR}" || return

	# shellcheck disable=SC2063
	GIT_BRANCH="$(git branch | grep '*' | sed 's/^*\ //g')"
	git fetch origin "${GIT_BRANCH}" &> /dev/null

	GIT_LOG="$(git log "HEAD..origin/${GIT_BRANCH}" --oneline)"
	[[ -z "${GIT_LOG}" ]] && _log "No ${APP} update needed" && return

	_log "${APP} update available"

	_log "Downloading ${APP} update"
	git pull
	git -c color.submodule=always submodule update --init

	_log "Performing rebuild"
	rebuild

	restart
}

rebuild() {
	cd "${APP_DIR}" || return

	_log "Removing file '${APP_PKG_LOCK}'"
	rm -f "${APP_PKG_LOCK}"

	_log "Removing directory '${APP_NM_DIR}'"
	rm -rf "${APP_NM_DIR}"

	_log "Performing npm install"
	npm install

	if [[ "${UNAME}" == "Linux" ]]; then
		_log "Fixing permissions on directory '${APP_NM_DIR}'"
		sudo chown -R "${APP_USER}:${APP_USER}" "${APP_NM_DIR}"
	fi
}

install() {
	_log "Installing ${SYSTEMD_APP}"
	if [[ -s "${SYSTEMD_APP_FILE}" ]]; then
		if ! sudo rm -f "${SYSTEMD_APP_FILE}"; then
			_log "Failed to remove existing systemd unit file, cannot continue"
			exit 1
		fi
	fi

	if ! sudo cp "${APP_DIR}/helpers/${SYSTEMD_APP}" "${SYSTEMD_APP_FILE}"; then
		_log "Failed to copy systemd unit file, cannot continue"
		exit 2
	fi

	if ! sudo systemctl daemon-reload; then
		_log "Failed to reload systemd, cannot continue"
		exit 3
	fi

	_log "Installed systemd unit successfully"
}

uninstall() {
	_log "Uninstalling ${SYSTEMD_APP}"

	if [[ -s "${SYSTEMD_APP_FILE}" ]]; then
		if ! sudo rm -f "${SYSTEMD_APP_FILE}"; then
			_log "Failed to remove existing systemd unit file, cannot continue"
			exit 1
		fi
	fi

	if ! sudo systemctl daemon-reload; then
		_log "Failed to reload systemd, cannot continue"
		exit 3
	fi

	_log "Uninstalled systemd unit successfully"
}

enable() {
	if sudo systemctl -q is-enabled "${SYSTEMD_APP}"; then
		_log "${SYSTEMD_APP} is already enabled"
		return
	fi

	if [[ ! -s "${SYSTEMD_APP_FILE}" ]]; then
		install
	fi

	_log "Enabling ${SYSTEMD_APP}"
	sudo systemctl enable "${SYSTEMD_APP}"
	_sleep_msg

	if sudo systemctl -q is-enabled "${SYSTEMD_APP}"; then
		_log "Enabled ${SYSTEMD_APP} successfully"
		return
	fi

	_log "Failed to enable ${SYSTEMD_APP}"
}

disable() {
	if ! sudo systemctl -q is-enabled "${SYSTEMD_APP}"; then
		_log "${SYSTEMD_APP} is already disabled"
		return
	fi

	_log "Disabling ${SYSTEMD_APP}"
	sudo systemctl disable "${SYSTEMD_APP}"
	_sleep_msg

	if ! sudo systemctl -q is-enabled "${SYSTEMD_APP}"; then
		_log "Disabled ${SYSTEMD_APP} successfully"
		return
	fi

	_log "Failed to disable ${SYSTEMD_APP}"
}

start() {
	if sudo systemctl -q is-active "${SYSTEMD_APP}"; then
		_log "${SYSTEMD_APP} is already active"
		return
	fi

	_log "Starting ${SYSTEMD_APP}"
	sudo systemctl start "${SYSTEMD_APP}"
	_sleep_msg

	if sudo systemctl -q is-active "${SYSTEMD_APP}"; then
		_log "Started ${SYSTEMD_APP} successfully"
		return
	fi

	_log "Failed to start ${SYSTEMD_APP}"
	echo
	status
}

stop() {
	if ! sudo systemctl -q is-active "${SYSTEMD_APP}"; then
		_log "${SYSTEMD_APP} is already inactive"
		return
	fi

	_log "Stopping ${SYSTEMD_APP}"
	sudo systemctl stop "${SYSTEMD_APP}"
	_sleep_msg

	if ! sudo systemctl -q is-active "${SYSTEMD_APP}"; then
		_log "Stopped ${SYSTEMD_APP} successfully"
		return
	fi

	_log "Failed to stop ${SYSTEMD_APP}"
	echo
	status
}

restart() {
	stop;  _sleep_msg
	start; _sleep_msg
	status
}

status() {
	echo -e "Checking status of ${APP}\n"
	sudo systemctl --no-pager status "${APP}"
}

follow() {
	sudo journalctl -u "${APP}" -f -n 5 --all | sed "s/$(hostname -s)\ ${APP}\[.*.]:\ //g"
}

#### Main functions ==final ####


#### Main code ==start ####

# Populate argument if none passed
[[ -z "${1}" ]] && CMD="status" || CMD="${1/_/}"

# Check if argument exists
grep -Eq "^${CMD}\(\)\ {\$" "${HELPER_FILE}" || _usage

_platform_check "${CMD}"

# Execute argument
"${CMD}" "${2}"

#### Main code ==final ####
